# -*- coding: utf-8 -*-
"""DesviaciÃ³n.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13RKYLmhzo3e2U73Ypu4GOp_qj_bEKBJH
"""
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import pandas as pd
from scipy.stats import norm
from scipy import stats



def distance_proportion(size,value,predicted):
    #takes a number and evaluetes if 
    superior=value*(1+size)
    inferior=value*(1-size)
    if predicted>inferior and predicted<superior:
        in_range=True
    else:
        in_range=False
    return in_range,superior,inferior



def distance_distribution(ditribution,error_size,value,predicted,range=0.7):
    
    prob=distribution.pdf(error_size)
    if prob>range:
        in_range=True
    else:
        in_range=False
    return in_range,prob,error_size


size=0.8

data1=pd.read_excel(r"C:\Users\usuario\Documents\contract-transparency-copia\data\resultados\torch2.xlsx")
data1["perc_error"]=data1.apply(lambda row:(row[1]-row["predict"])/row["predict"],axis=1)
data1["in_range"]=data1.apply(lambda row: distance_proportion(size,row[1],row["predict"])[0],axis=1)

mu,sigma,kurt=stats.t.fit(data1["perc_error"][data1["in_range"]==1])
distribution=stats.t( mu, sigma,kurt)
data1["likeable_chance"]=data1.apply(lambda row: distance_distribution(distribution,row["perc_error"],row[1],row["predict"]),axis=1)



